name: Build and Release

on:
  push:
    branches:
      - experimental
jobs:
  build-wheel:
    name: Build wheels on ${{ matrix.os }}
    strategy:
      matrix:
        buildplat:
          - [ubuntu-latest, manylinux_x86_64]
          - [macos-14, macosx_arm64]
          # - [macos-13, macosx_x86_64]
        python:
          - ["cp310", "3.10"]
          - ["cp311", "3.11"]
          - ["cp312", "3.12"]
    runs-on: ${{ matrix.buildplat[0] }}
    if: github.ref == 'refs/heads/experimental'

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v3

      - name: Setup micromamba
        uses: mamba-org/setup-micromamba@v2.0.1
        with:
          environment-name: pyensmallen
          create-args: armadillo ensmallen nomkl
          init-shell: bash
          generate-run-shell: true
      # Install MKL on Linux only
      - name: Install MKL (Linux)
        if: matrix.buildplat[0] == 'ubuntu-latest'
        run: |
          # Update the package list
          sudo apt-get update
          
          # Install Intel MKL
          sudo apt-get install -y intel-mkl
          
          # Search for MKL libraries in common system directories
          echo "Searching for MKL in system directories..."
          MKL_PATH=$(find /usr -name "libmkl_rt.so*" 2>/dev/null)
          if [ -z "$MKL_PATH" ]; then
            echo "MKL not found in /usr"
          else
            echo "MKL found at: $MKL_PATH"
          fi

          # Search for MKL in conda environments
          MKL_CONDA_PATH=$(find $MAMBA_ROOT_PREFIX -name "libmkl_rt.so*" 2>/dev/null)
          if [ -z "$MKL_CONDA_PATH" ]; then
            echo "MKL not found in conda"
          else
            echo "MKL found in conda at: $MKL_CONDA_PATH"
          fi

          # Check if MKL is listed in ldconfig
          MKL_LDCONFIG=$(ldconfig -p | grep mkl)
          if [ -z "$MKL_LDCONFIG" ]; then
            echo "MKL not found in ldconfig"
          else
            echo "MKL found in ldconfig: $MKL_LDCONFIG"
          fi

          # Ensure the symbolic link is created if MKL is found
          if [ -n "$MKL_PATH" ]; then
            echo "Creating symbolic link for MKL..."
            sudo ln -sf $MKL_PATH /lib/x86_64-linux-gnu/libmkl_rt.so.2
            echo "Symbolic link created: /lib/x86_64-linux-gnu/libmkl_rt.so.2"
          else
            echo "MKL library not found, skipping symbolic link creation"
          fi



      - name: Build wheels
        uses: pypa/cibuildwheel@v2.19.0
        env:
          CIBW_BEFORE_BUILD: |
            export PKG_CONFIG_PATH="/Users/runner/micromamba/envs/pyensmallen/lib/pkgconfig:$PKG_CONFIG_PATH"
            export CMAKE_PREFIX_PATH="/Users/runner/micromamba/envs/pyensmallen"
            ls -la /Users/runner/micromamba/envs/pyensmallen/lib/pkgconfig || echo "pkgconfig dir not found"
            python -m pip install -v build
            python -c "import os; print('Environment:', os.environ)"
          CIBW_ENVIRONMENT_LINUX: >-
            MAMBA_ROOT_PREFIX="/host/home/runner/micromamba"
            CMAKE_PREFIX_PATH="/host/home/runner/micromamba/envs/pyensmallen"
            VERBOSE=1
            LD_LIBRARY_PATH="/usr/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH"
            VERBOSE=1
            export LD_LIBRARY_PATH=/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH

          CIBW_ENVIRONMENT_MACOS: >-
            PKG_CONFIG_PATH="/Users/runner/micromamba/envs/pyensmallen/lib/pkgconfig"
            CMAKE_PREFIX_PATH="/Users/runner/micromamba/envs/pyensmallen"
            VERBOSE=1
          CIBW_BUILD: ${{ matrix.python[0] }}-${{ matrix.buildplat[1] }}
          CIBW_BUILD_VERBOSITY: 3
        continue-on-error: true # Let it complete even if there's an error

      - name: Upload logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: cibuildwheel-logs
          path: |
            ~/.local/share/cibuildwheel/**/*.log
            /tmp/cibw*/**/*.log
      - name: Store the distribution packages
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.python[0] }}-${{ matrix.buildplat[1] }}
          path: wheelhouse/*.whl

  build-sdist:
    name: Build source distribution
    runs-on: ubuntu-22.04
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake libarmadillo-dev libensmallen-dev

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools build wheel pybind11

      - name: Build sdist
        run: python -m build --sdist --outdir wheelhouse/

      - uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: ./wheelhouse/*.tar.gz
